from flask import Flask, request, jsonify

#Training Purpose 
app = Flask(__name__)

# In-memory storage for simplicity (replace with a database in a real application)
questions = []

# Create (POST) Request
@app.route('/api/questions', methods=['POST'])
def add_question():
    data = request.json
    question_text = data.get('question_text')
    options = data.get('options')
    correct_option_index = data.get('correct_option_index')

    # Basic validation
    if not question_text or not options or not correct_option_index:
        return jsonify({'error': 'Invalid request data'}), 400

    # Create a new question
    new_question = {
        'question_text': question_text,
        'options': options,
        'correct_option_index': correct_option_index
    }

    # Add the new question to the list
    questions.append(new_question)

    return jsonify(new_question), 201

# Read (GET) Request
@app.route('/api/questions/<int:question_id>', methods=['GET'])
def get_question(question_id):
    if question_id < 0 or question_id >= len(questions):
        return jsonify({'error': 'Question not found'}), 404

    return jsonify(questions[question_id])

# Update (PUT) Request
@app.route('/api/questions/<int:question_id>', methods=['PUT'])
def update_question(question_id):
    if question_id < 0 or question_id >= len(questions):
        return jsonify({'error': 'Question not found'}), 404

    data = request.json
    # Update the question with the new data
    questions[question_id].update(data)

    return jsonify(questions[question_id])

# Delete (DELETE) Request
@app.route('/api/questions/<int:question_id>', methods=['DELETE'])
def delete_question(question_id):
    if question_id < 0 or question_id >= len(questions):
        return jsonify({'error': 'Question not found'}), 404

    # Delete the question
    deleted_question = questions.pop(question_id)

    return jsonify({'message': 'Question deleted', 'deleted_question': deleted_question})

if __name__ == '__main__':
    app.run(debug=True)
